@page "/login"
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager Navigation
@inject AuthAPI AuthAPI
<!--Esse attribute permite que anonimos(deslogados) tenham acesso a essa página-->
@attribute [AllowAnonymous]

<MudPaper Class="px-8 pt-2 pb-4 mx-16 my-8" Justify="Justify.Center">
    <!--Tag responsavel por mostrar elementos quando o usuário está autenticado e autorizado e quando não está também!-->
    <AuthorizeView>
        <Authorized>
            <!--@context é do mesmo tipo usado para obter uma indentificação do usuário então o nome dele é acessivel.-->
            <p>Você está conectado como @context.User.Identity.Name</p>
        </Authorized>
        <NotAuthorized>
            <MudForm>

                <MudTextField T="string" Label="Email" @bind-Value="email"
                              Variant="Variant.Outlined" Class="my-4"
                              Required="true" RequiredError="Email obrigatório!"
                              OnlyValidateIfDirty="true" />

                <MudTextField T="string" Label="Senha" @bind-Value="senha"
                              InputType="InputType.Password"
                              Variant="Variant.Outlined" Class="my-4"
                              Required="true" RequiredError="Senha obrigatória!"
                              OnlyValidateIfDirty="true" />

                <MudButton Variant="Variant.Filled" Color="Color.Primary"
                           Class="my-6" @onclick="FazerLogin">
                    Login
                </MudButton>
            </MudForm>
        </NotAuthorized>
    </AuthorizeView>
    
</MudPaper>

@code {
    private string? email;
    private string? senha;

    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    private async Task FazerLogin()
    {
        var resposta = await AuthAPI.LoginAsync(email, senha);
        if (resposta.Sucesso)
        {
            if (ReturnUrl is not null)
                Navigation.NavigateTo(ReturnUrl);
        }
    }

}
